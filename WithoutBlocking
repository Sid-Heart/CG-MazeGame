@@ -4,15 +4,15 @@
 #include <ctime>
 #include <sys/time.h>
 #include <cstring>
 #include <stdlib.h>
 using namespace std;
-const int Height = 20, Width = 20;
+
+const int Height = 10, Width = 10;
 const float w = 500, h = 500, o = 10;
 const float ww = w - 2 * o, hh = h - 2 * o;
 int posx, posy, endx, endy;
-
 void DFS(int i, int j);
 
 struct Cell {
 	bool visited;	// has this cell visited for making maze
 	bool road[4];// is each four directions of cells(up, down, right, left) connected to this cell
@@ -25,55 +25,85 @@ struct Cell {
 		road[3] = false;
 	}
 } Node[Height][Width];
 
 void createMaze() {
-	DFS(rand() % Height, rand() % Width);
 	posy = 0;
 	posx = rand() % Width;
 	endy = Height - 1;
 	endx = rand() % Width;
 	Node[0][posx].road[0] = Node[Height - 1][endx].road[1] = true;
+	DFS(rand() % Height, rand() % Width);
+	for (int i = 0; i < Height; ++i)
+		for (int j = 0; j < Width; ++j)
+			Node[i][j].visited = false;
 }
 
 void DrawCells() {
+
 	for (int i = 0; i < Height; ++i) {
 		for (int j = 0; j < Width; ++j) {
 			float cx = (2 * (j) + 1) * ww / Width / 2 + o, cy = (2
 					* (Height - i - 1) + 1) * hh / Height / 2 + o, dx = ww
 					/ Width / 2, dy = hh / Height / 2;
 
+			if (Node[i][j].visited) {
+				glColor3f(205 / 255.0, 133 / 255.0, 63 / 255.0);
+				glBegin(GL_POLYGON);
+				glVertex2f(cx - dx, cy + dy);
+				glVertex2f(cx + dx, cy + dy);
+				glVertex2f(cx + dx, cy - dy);
+				glVertex2f(cx - dx, cy - dy);
+				glEnd();
+			}
+
 			if (i == posy && j == posx) {
-				cerr << "->" << posx << "," << posy << endl;
-				cerr << "->" << cx << "," << cy << endl;
+				glColor3f(139 / 255.0, 69 / 255.0, 19 / 255.0);
 				glPointSize(min(dx, dy));
 				glBegin(GL_POINTS);
 				glVertex2f(cx, cy);
 				glEnd();
 			}
 
+			glLineWidth(2);
 			if (!Node[i][j].road[0]) {
 				glBegin(GL_LINE_STRIP);
+				glColor3f(rand() % 255 / 255.0, rand() % 255 / 255.0,
+						rand() % 255 / 255.0);
 				glVertex2f(cx - dx, cy + dy);
+				glColor3f(rand() % 255 / 255.0, rand() % 255 / 255.0,
+						rand() % 255 / 255.0);
 				glVertex2f(cx + dx, cy + dy);
 				glEnd();
 			}
 			if (!Node[i][j].road[1]) {
 				glBegin(GL_LINE_STRIP);
+				glColor3f(rand() % 255 / 255.0, rand() % 255 / 255.0,
+						rand() % 255 / 255.0);
 				glVertex2f(cx - dx, cy - dy);
+				glColor3f(rand() % 255 / 255.0, rand() % 255 / 255.0,
+						rand() % 255 / 255.0);
 				glVertex2f(cx + dx, cy - dy);
 				glEnd();
 			}
 			if (!Node[i][j].road[2]) {
 				glBegin(GL_LINE_STRIP);
+				glColor3f(rand() % 255 / 255.0, rand() % 255 / 255.0,
+						rand() % 255 / 255.0);
 				glVertex2f(cx + dx, cy - dy);
+				glColor3f(rand() % 255 / 255.0, rand() % 255 / 255.0,
+						rand() % 255 / 255.0);
 				glVertex2f(cx + dx, cy + dy);
 				glEnd();
 			}
 			if (!Node[i][j].road[3]) {
 				glBegin(GL_LINE_STRIP);
+				glColor3f(rand() % 255 / 255.0, rand() % 255 / 255.0,
+						rand() % 255 / 255.0);
 				glVertex2f(cx - dx, cy - dy);
+				glColor3f(rand() % 255 / 255.0, rand() % 255 / 255.0,
+						rand() % 255 / 255.0);
 				glVertex2f(cx - dx, cy + dy);
 				glEnd();
 			}
 		}
 		cerr << endl;
@@ -123,43 +153,48 @@ void init() {
 	glMatrixMode(GL_MODELVIEW);
 }
 
 void display() {
 	glClear(GL_COLOR_BUFFER_BIT);
-	glClearColor(1, 1, 1, 1);
+	glClearColor(255 / 255.0, 228 / 255.0, 181 / 255.0, 1);
 	glColor3f(0, 0, 0);
 	DrawCells();
 	glutSwapBuffers();
 }
 
 void idle() {
 	glutPostRedisplay();
 }
 
 void keyboard(unsigned char ch, int x, int y) {
+	Node[posy][posx].visited = true;
 	switch (ch) {
 	case 'W':
 	case 'w':
-		if (Node[posy][posx].road[0] && posy > 0)
+		if (Node[posy][posx].road[0] && posy > 0
+				&& !Node[posy - 1][posx].visited)
 			posy--;
 		break;
 
 	case 'S':
 	case 's':
-		if (Node[posy][posx].road[1] && posy < Height - 1)
+		if (Node[posy][posx].road[1] && posy < Height - 1
+				&& !Node[posy + 1][posx].visited)
 			posy++;
 		break;
 
 	case 'A':
 	case 'a':
-		if (Node[posy][posx].road[3] && posx > 0)
+		if (Node[posy][posx].road[3] && posx > 0
+				&& !Node[posy][posx - 1].visited)
 			posx--;
 		break;
 
 	case 'D':
 	case 'd':
-		if (Node[posy][posx].road[2] && posx < Width - 1)
+		if (Node[posy][posx].road[2] && posx < Width - 1
+				&& !Node[posy][posx + 1].visited)
 			posx++;
 		break;
 	}
 	if (posx == endx && posy == endy) {
 		glutTimerFunc(1000, exit, 0);

//add + line and remove - lines
